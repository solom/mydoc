#+title: Подсказка по HASKELL
#+author: Alex Solomin


* Интерпретатор
  :l <имя модуля> - загрузить модуль
  :? доступные команды
  :t тип выражения
  :set +t выводить не только результат вычисления но и тип
  :set +s выводить ещё и статистику вычислений помимо результата
  :cd <директория> перийти в директорию
  :r перегрузить модуль
  :browse <имя модуля> посмотреть что в модуле определено
  :i <имя> получить информацию о классе типа, типе, конструкторе
  :q выход
* Импорт
  -- тут шапка
  module Namemodule(opr1, opr2, ...- то, что экспортируется) where
  import Module1(...) 
  import Module2(...)
  import Prelude () -- ничего не импортируем
  import Prelude (Bool(..)) -- импортируем тип данных Bool со всеми конструкторами (или все методы, 
  если класс типа)
  import Sub.Empty -- импорт модуля, находящегося в поддиректории Sub
** Доп. справка
   import Mod	x, y, z, Mod.x, Mod.y, Mod.z	(By default, qualified and unqualified names.)
   import Mod ()	(Nothing!)	(Useful for only importing instances of typeclasses and nothing else)
   import Mod (x,y)	x, y, Mod.x, Mod.y	(Only x and y, no z.)
   import qualified Mod	Mod.x, Mod.y, Mod.z	(Only qualified versions; no unqualified versions.)
   import qualified Mod (x,y)	Mod.x, Mod.y	(Only x and y, only qualified.)
   import Mod hiding (x,y)	z, Mod.z	(x and y are hidden.)
   import qualified Mod hiding (x,y)	Mod.z	(x and y are hidden.)
   import Mod as Foo	x, y, z, Foo.x, Foo.y, Foo.z	(Unqualified names as before. Qualified names use Foo instead of Mod.)
   import Mod as Foo (x,y)	x, y, Foo.x, Foo.y	(Only import x and y.)
   import qualified Mod as Foo	Foo.x, Foo.y, Foo.z	(Only qualified names, using new qualifier.)
   import qualified Mod as Foo (x,y)	Foo.x, Foo.y	(Only qualified versions of x and y, using new qualifier)
** Полный пример с Group
#+begin_src haskell
   module Group
   where

   import Prelude (Bool(..), Eq(..), Show(..), not, and)
   -- импорт символов (..) - со всеми конструкторами
   class Group a where
       e :: a
       (+) :: a -> a -> a
       inv :: a -> a

   twice :: Group a => a -> a
   twice a = a + a
   
   isE :: (Group a, Eq a) => a -> Bool
   isE x = (x == e)

   instance Group Bool where
       e = True
       (+) a b = and [a, b]
       inv a = not a
#+end_src
* Типы
  Bool -- логические (False True)
  Char -- буква, пришется в одинарных кавычках
  String -- Строка (Список букв ['a', 'b', 'c'] ~ "abc")
  Int -- Целые ограниченные
  Integer -- Целые не ограниченные (но не эффективные)
  Double -- Числа с двойной точностью
  Float -- Числа с одинарной точностью
  Rational -- Дробные числа.
* Примеры определения данных
  #+begin_src haskell
  data Date = Date Year Month Day -- произведение (Date - конструктор, остальное - значения)
  
  -- можно так: 
  
  data Date = Date Int Int Int -- цулыми числами определяем год, месяц  день
  
  -- По первому примеру (продолжение)
  
  data Month = January | February | ... -- (сумма типов) каждому месяцу - название-конструктор и все типы Month
  
  data Day = Day Int -- день (целое число типа Day)
  data Week = Monday | Tuesday | ... -- аналогично выше
  data Time = Time Hour Minute Second (произведение типов)

  data Hour = Hour Int
  data Minute = Minute Int
  data Second = Second Int

  data Some a = Some a
      deriving (Show, Eq, Ord) - тип данных есть экземпляр классов типов в скобках
  #+end_src
** Пример с типом Bool
   data Bool = False | True
   
   not :: Bool -> Bool
   not True = False
   not False = True
   
   and :: Bool -> Bool -> Bool
   and False _ = False
   and True x = x

   or :: Bool -> Bool -> Bool
   or True _ = True
   or False x = x
* Классы типов
** Примеры с классами типов
*** Eq
#+begin_src haskell
   class Eq a where
      (==) :: a -> a -> Bool
      (/=) :: a -> a-> Bool -- в классах типов только типы
#+end_src 
*** Show
#+begin_src haskell
   class Show a where
       show :: a -> String
#+end_src
** Суперклассы
#+begin_src haskell
  class IsPerson a
  class IsPerson a => HasName a where
      name :: a -> String
  -- Тут класс HasName является подклассом IsPerson
  -- Мы можем сделать экземпляр класса HasName только для типов из IsPerson
#+end_src
** Экземпляры классов типов
*** Пример с Eq
#+begin_src haskell    
    instance Eq Bool where
        (==) True True = True
	(==) False False = True
	(==) _ _ = False
	(/=) a b = not (a == b)
#+end_src 
*** Пример с Show
#+begin_src haskell
    instance Show Bool  where
        show True = "True"
	show False = "False"

    instance Show Week where
        show Monday = "Mon"
	show Tuesday = "Tue"
	-- ...
    instance Show Time where
        show (Time h m s) = (show h) ++ ":" ++ (show m) ++ ":" ++ (show s)
#+end_src
*** Пример с Group
#+begin_src haskell    
    class Group a where
        e :: a
	(+) :: a -> a
	inv :: a -> a
	
    instance Group Bool where
        e = True
	(+) a b = and [a, b] -- and working only
	inv a = not a
#+end_src	
*** Пример с Nat
#+begin_src haskell
    instance Num Nat where
        (.+) a Zero = a -- .+ = +
        (+) a (Succ b) = Succ (a + b)
        negate _ = error "negate is undefined for Nat"
        (*) a Zero = Zero
        (*) a (Succ b) = a + (a * b)
        abs x  = x
        signum Zero = Zero
        signum _ = Succ Zero
        fromInteger 0 = Zero
        fromInteger n = Succ (fromInteger (n - 1))
#+end_src
*** Пример с Addable
#+begin_src haskell
    class Addable a where
        (<+>) :: a -> a -> a

    data Nym = Nyma [Char] | Nymi Int
        deriving Show

    instance Addable Nym where
        (<+>) (Nyma a) (Nyma b) = Nyma (a ++ b)
        (<+>) (Nymi a) (Nymi b) = Nymi (a + b)
#+end_src
*** Пример с монадой Identity
#+begin_src haskell
    newtype Identity a = Identity {runIden :: a}
    --  deriving Show

    -- fmap :: (a -> b) -> f a -> f b 

    instance Functor Identity where
        fmap f (Identity n) = Identity (f n) 

    instance Applicative Identity where
        pure a = Identity a
        Identity f <*> Identity a = Identity (f a)


    -- (>>=) :: Monad m => m a -> (a -> m b) -> m b

    instance Monad Identity where
        return a = Identity a
        Identity a >>= k = k a
  
    instance Show a => Show (Identity a) where
        show (Identity a) = "ID: " ++ (show a) 

    someDoing :: Identity Int -> Identity Int
    someDoing n =
        do
            val <- n
            return (val + 2)
#+end_src
*** Пример с Testr like Reader
#+begin_src haskell
data Testr r a = Tdr {runTestr :: (r -> a)}
  
instance Functor (Testr r) where
  fmap f (Tdr g) = Tdr (f . g)

instance Applicative (Testr r) where
  pure a = Tdr (\_ -> a)
  Tdr f2 <*> Tdr f =
    let fb = \r -> (((f2 r) . f) r)
    in
      Tdr fb

instance Monad (Testr r) where
  return a = Tdr (\_ -> a)
  m >>= k = Tdr $ \r -> 
    let a = runTestr m r
    in runTestr (k a) r

ask :: Testr r r
ask = Tdr id

mytest :: Testr MyBase Int    
mytest =
  do
    e <- ask
    return ((fst . head) e)
#+end_src
* Операторы
** infixr
  infix[lr] 0 $ - 
  r - правая ассоциативность 
  l - левая 
  0 - приоритет 
  (0 - низкий 9 - высокий) 
  $ - оператор
** case
   case <expression> of
       cond_1 -> ex1
       cond_2 -> ex2
       otherwise -> exDefault
* Прагмы
  {-# Language FlexibleContexts, FlexibleInstances, UndecidableInstances #-}
  {-# Language Pragma1, Pragma2 ... #-} - в начале модуля до всего вообще
  
